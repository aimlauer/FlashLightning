El nombre de la página va a ser: fivestrikes.com
flashlightning
ThunderWisdom


El mensaje de bad proxy me tira porque no uso el is_safe_url lo saqué porque sino
no puedo acceder a la db.

Cuando borrás un post también borrá los archivos del mismo
Cambiar _formhelpers por form.errors en templates
Cambiar el color al ícono de la hamburguesa en el modo oscuro cuando el viewport está estrecho
[-] Configurar una ruta para la carpeta de fotos
Agregar de nuevo secure_file (o algo así era la función no me acuerdo bien) en routes 
Agregar al upload una función para subir múltiples archivos (con javascript no como está
ahora a medida que vayas subiendo archivos que te aparezcan más inputs) permitiendo sólo pdfs
[x] Implementar login del usuario con flask login maybe https://flask-login.readthedocs.io/en/latest/
[x] Comprobar si el usuario está logueado
[~] Para contar las vistas que tienen y lo reciente que es el post agregar esos campos a la db.
Cambiar id_post por post_id
[~] Dividir cada tema/post por categorias, para ello hacer una tabla de categorías. 
[-] Que cada post tenga agradecimientos
[-] No va a ser anonímo pero tampoco vamos a solicitar el correo, es mejor ahora que lo pienso.
El sistema de comentarios tiene que funcionar como 4chan 
[-] En vez de que sean cartas debería ser una lista solamente
[~] Hacer más chico los botones para subir y hacer diferentes acciones, hcerlo un poco más discreto.
Tener una parte de artículos recientes con un botón arriba para subir uno nuevo, poder acceder rápidamente
[-] Hay que tener más info de cada usuario como por ejemplo su fecha de creación, número de posteos si está o no baneado, reputación(karma), listar los comentarios y los posts que hizo, etc y hacer profile.
[-] Enviar correos
[-] Recover/reset password
[-] Remember me todavía no funciona
[x] Agregar campo de admin en users
[x] Verificar en templates/home.html que si no hay ningún resultado de cartas 
[-] Agregar un campo de me gusta en Post
[-] Agregar el remember me en el login
[-] Agregar un campo en la tabla post que diga (visible=0 o 1), así que cuando quieras
poner moderado=on a alguna categoría puedas hacer visible sólo los post que querés por
defecto están ocultos.
[-] Autocompletar en search
[-] Hacer un thumbnail de menor calidad de cada imágen que se sube, para esto crear un campo en la db (thumbnail y thumbnail_max). 
[-] Agregar tags a cada artículo
[-] Agregar mensajes globales (cobrar 50 pe por esto)
[x] Hacer la parte de support me (actualmente dice pricing)
[-] Upload de audios, archivos, fotos.
[-] Agregar tabla de comments
[-] Cambiar /services a /help
[x] No pedir el correo en el registro y cambiar lo del login
[-] Cambiar redirect a index cuando subís algo
[-] Implementar /users/ route

La parte de likes sólo se debería poder votar una sóla vez (para esto hay que crear otra tabla sólo de likes).
La tabla debería ser algo como

class LikeCatalogo(UserMixin, db.Model):
  id = db.Column(db.Integer, primary_key=True)
  id_catalogo = db.Column(db.Integer, nullable=False)
  id_user = db.Column(db.Integer, nullable=False)
  # Esto debería ser un boolean no sé si existe este campo en SQLite
  like = db.Column(db.Boolean, nullable=False)

[-] Agregar mensajes de alerta cuando el usuario no existe o la contraseña es incorrecta!
[-] Mostrar el autor en views
[-] Permitir no subir ningún archivo adicional en la parte de subidas de mútliples archivos.

[-] Mejorar el <pre> que uso en /view/ por otra cosa no me gustó el css que usé en style.css capaz se puede escrbir de una mejor forma sin usar !important
[-] Sistema de comentarios, con votos y que puedas citar otros
[-] Poder cargar un video de youtube con subtitulos agregados externamente (seguro que existe una forma ingeniosa de hacer esto)

[-] Necesito alojar las imágenes, videos y audios en otro servidor, investigar como hacer para alojarlos en otro lugar y cargar externamente esos datos automáticamente en cada subida.

[-] Mejorar CSS del view.html mejor si ponemos todo en cuadro los posts y los comentarios

[x] En models hacer una tabla con el objetivo de cargar multiples archivos algo como
class ArchivoPost(UserMixin, db.Model):
  id = db.Column(db.Integer, primary_key=True)
  id_post = db.Column(db.String, nullable=False)
  file = db.Column(db.String, nullable=False)

Luego agregar una entrada por cada archivo. Ejemplo:
new = ArchivoPost(<id_post>,'file1.png')
db.session.save(new)
db.session.commit(new)

[x] Fijarse si funciona hacerlo de esta forma
Estudiar más como funcionan las foreigh_keys y el backref
Escribir un validator para tags.
Chequear commits y save en /upload en la parte de subir múltiples archivos.
Agregar email a la tabla de la db igual, aunque no se necesite para registrar se puede agregar después
Implementar una función que permita cambiar el nombre de usuario
Cambiar categories a category en 
Saca lo de aceptar las condiciones de uso, no existe ninguna.
Agregar un link de una página de agradecimiento en donde liste toda la gente que agradeció al artículo.

Agregar vistas al perfil de un usuario
Agrggar una función para ocultar todos los posts
Implementar una función para agrandar la imágen al click.
No deberías poder autoagradecerte.
Implementar posts fijos.
Verificar para que sirve el post en Category, hasta el momento no necesito acceder
a post desde Category.
Tengo que verificar que la categoría que está subiendo esté en la lista.
Borrar comentarios boludos.
[x] Agregar migrate urgente.
Cambiar css por scss para hacer el dark mode
Cambie la tabla Thanks así que tengo que cambiar el código tmb.
Cuando fallás un form no deberías perder toda la información para esto implementar todos los validatos que
faltan.
La página por defecto va a estar en dark mode, el light mode lo dejamos para dentro de unos años.
Identificar los links de cada post.
listar las categorias en crear un post.
Que se puedan subir imágenes y videos y mostrarlos bien.
Borrás un post y hacés uno nuevo con la misma id te putea (pista: el problema está cuando borrás algo,
Agregar de nuevo el is_safe_url de routes.
en realidad deberías borrar todo en cascada)
Al nombre del archivo a guardar se le debería agregar el tiempo, y un número aleatorio.
Por qué abre tantas veces el mismo archivo?
Para detectar si es una imágen o un video, tengo que trabajar con un tipo de estructura
que me envíe algo así como un json, con el nombre del archivo y la extensión por separado.
Poder adjuntar mútliples imágenes en un post y también en un comentario.

Tengo que definir la relación en el campo del padre no del hijo así:
Para que el efecto cascada funcione tenés que definir así las relaciones en la tabla del padre.
  If you define the relationship on the Parent class instead, it will work:
  children = relationship("Child", cascade="all,delete", backref="parent")

"In fact, the relationship.backref keyword is only a common shortcut for placing a second relationship() onto the Address mapping, including the establishment of an event listener on both sides which will mirror attribute operations in both directions."

Arreglar -> Las tags no se cargan por el problema de categorías, (creo que se soluciona usando el efecto cascade) (arreglado, por lo menos hasta ahora)
Reducir el número de publicaciones cada vez que se borra un post (después lo hago)
Hacer un uploads de files como 8kun, 4chan.
No permitir mútliples agradecimientos a usuarios, debería ser uno por día.
Cuando vas a subir una imágen, no la tenés que subir con el nombre original, tenés que subirla con el nombre de la hora o algo parecido y guardar la 
extensión por separado en la db.
Tengo que borrar todas las imágenes cada vez que se borra un post, tengo que generar nombre randoms
para las imágenes tengo que hacer que cada vez que clickea en una imágen se expanda la imágen en la
misma página con js, no que te lo abra en una pestaña aparte.
Tengo que verificar que si el usuario ya está logueado no te permita acceder a /login y a /register.
Agregar la función de YouTube embed.


Tengo que aprender a migrar la db.
Sólo se debería poder crear una categoría si sos admin.
No te deberías poder autoagradecer.
